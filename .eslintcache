[{"C:\\Users\\hamza\\OneDrive\\Documents\\fretboard\\src\\index.js":"1","C:\\Users\\hamza\\OneDrive\\Documents\\fretboard\\src\\App.js":"2","C:\\Users\\hamza\\OneDrive\\Documents\\fretboard\\src\\reportWebVitals.js":"3","C:\\Users\\hamza\\OneDrive\\Documents\\fretboard\\src\\redux\\store.js":"4","C:\\Users\\hamza\\OneDrive\\Documents\\fretboard\\src\\components\\Fretboard.js":"5","C:\\Users\\hamza\\OneDrive\\Documents\\fretboard\\src\\components\\CircleOfFifths.js":"6","C:\\Users\\hamza\\OneDrive\\Documents\\fretboard\\src\\redux\\reducers\\index.js":"7","C:\\Users\\hamza\\OneDrive\\Documents\\fretboard\\src\\redux\\actions.js":"8","C:\\Users\\hamza\\OneDrive\\Documents\\fretboard\\src\\redux\\helpers.js":"9","C:\\Users\\hamza\\OneDrive\\Documents\\fretboard\\src\\config\\guitar.js":"10","C:\\Users\\hamza\\OneDrive\\Documents\\fretboard\\src\\redux\\reducers\\fretboard.js":"11","C:\\Users\\hamza\\OneDrive\\Documents\\fretboard\\src\\redux\\reducers\\circleOfFifths.js":"12","C:\\Users\\hamza\\OneDrive\\Documents\\fretboard\\src\\redux\\actionTypes.js":"13"},{"size":654,"mtime":1640389944597,"results":"14","hashOfConfig":"15"},{"size":3236,"mtime":1640389944595,"results":"16","hashOfConfig":"15"},{"size":375,"mtime":1640389944600,"results":"17","hashOfConfig":"15"},{"size":125,"mtime":1640389944600,"results":"18","hashOfConfig":"15"},{"size":27664,"mtime":1690016181314,"results":"19","hashOfConfig":"15"},{"size":5809,"mtime":1640389944595,"results":"20","hashOfConfig":"15"},{"size":194,"mtime":1640389944600,"results":"21","hashOfConfig":"15"},{"size":2648,"mtime":1689881243271,"results":"22","hashOfConfig":"15"},{"size":195,"mtime":1640389944599,"results":"23","hashOfConfig":"15"},{"size":10852,"mtime":1640389944597,"results":"24","hashOfConfig":"15"},{"size":3404,"mtime":1690016140101,"results":"25","hashOfConfig":"15"},{"size":567,"mtime":1640389944599,"results":"26","hashOfConfig":"15"},{"size":1034,"mtime":1689881215446,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"16h7sz5",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"C:\\Users\\hamza\\OneDrive\\Documents\\fretboard\\src\\index.js",[],["56","57"],"C:\\Users\\hamza\\OneDrive\\Documents\\fretboard\\src\\App.js",[],"C:\\Users\\hamza\\OneDrive\\Documents\\fretboard\\src\\reportWebVitals.js",[],"C:\\Users\\hamza\\OneDrive\\Documents\\fretboard\\src\\redux\\store.js",[],"C:\\Users\\hamza\\OneDrive\\Documents\\fretboard\\src\\components\\Fretboard.js",["58","59","60"],"import guitar from '../config/guitar';\r\nimport React, { useEffect } from 'react';\r\nimport { withRouter } from 'react-router-dom'\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { \r\n        fillFretboard,\r\n        toggleNote, \r\n        \r\n        setKey, \r\n\r\n        setScale, \r\n        setScaleFormula,\r\n        setScaleNotes,\r\n        setScaleIntervals,\r\n        \r\n        setMode,\r\n        setModeNotes,\r\n        setModeIntervals,\r\n        setArppegio,\r\n        setArppegioNotes,\r\n        setArppegioIntervals,\r\n\r\n        setChord,\r\n\r\n        setShape,\r\n        setFret,\r\n\r\n        setNotesDisplay\r\n} from \"../redux/actions\";\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { getNoteFromFretboard } from '../redux/helpers';\r\nimport classNames from \"classnames\";\r\nimport './guitar-neck.css';\r\nimport { Typography } from '@material-ui/core';\r\nconst queryString = require('query-string');\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    form: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n    },\r\n    formElement: {\r\n        flex: '1 0 21%',\r\n        margin: '10px'\r\n    },\r\n    seperator: {\r\n        width: '100%',\r\n        fontSize: '14px',\r\n        margin: '10px',\r\n    }\r\n}));\r\n  \r\nconst Fretboard = withRouter((props) => {\r\n\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        fillFretboard();\r\n        fillStore();\r\n    }, []);\r\n\r\n    function fillStore(){\r\n        const { \r\n            key, \r\n            scale, \r\n            mode, \r\n            arppegio, \r\n            chord, \r\n            shape, \r\n            fret,\r\n            notesDisplay\r\n        } = queryString.parse(props.history.location.search);\r\n        \r\n        if(parseInt(key) >= 0 && parseInt(key) < 12){\r\n            props.setKey(parseInt(key));\r\n        }\r\n\r\n        if(Object.keys(guitar.scales).includes(scale)){\r\n            props.setScale(scale)\r\n        }\r\n\r\n        if(parseInt(mode) >= 0 && parseInt(mode) <= 6){\r\n            props.setMode(mode);\r\n        }\r\n\r\n        if(Object.keys(guitar.arppegios).includes(arppegio)){\r\n            props.setArppegio(arppegio);\r\n        }\r\n\r\n        if(Object.keys(guitar.arppegios).includes(chord)){\r\n            props.setChord(chord)\r\n        }\r\n\r\n        if(shape >= 0 && shape <= 4){\r\n            props.setShape(shape);\r\n        }\r\n\r\n        if(fret > 0 && fret < 22){\r\n            props.setFret(fret);\r\n        }   \r\n\r\n        if(notesDisplay === \"true\" || notesDisplay === \"false\"){\r\n            props.setNotesDisplay(notesDisplay === \"true\");\r\n        }\r\n    }\r\n\r\n    function fillFretboard(){\r\n        var newFretboard = [...props.fretboard];\r\n        \r\n        for(let i = 0; i < guitar.numberOfStrings; i++){\r\n            for(let j = 0; j < guitar.numberOfFrets; j++){\r\n                newFretboard[i][j] = {\r\n                    show: false,\r\n                    current: guitar.notes.sharps[(guitar.tuning[i] + j ) % 12]\r\n                };\r\n            }\r\n        }\r\n\r\n        props.fillFretboard(newFretboard);\r\n    }\r\n    useEffect(() => {\r\n        cleanFretboard();\r\n        update();\r\n\r\n    }, [props.keySignature, \r\n        props.scale, \r\n        props.mode, \r\n        props.arppegio, \r\n        props.chord, \r\n        props.fret,\r\n        props.notesDisplay,\r\n        props.shape\r\n    ]);\r\n\r\n    function cleanFretboard(){\r\n        var newFretboard = [...props.fretboard];\r\n        \r\n        for(let i = 0; i < guitar.numberOfStrings; i++){\r\n            for(let j = 0; j < guitar.numberOfFrets; j++){\r\n                newFretboard[i][j].show = false;\r\n            }\r\n        }\r\n\r\n        props.fillFretboard(newFretboard);\r\n    }\r\n\r\n    function onElementChange(e, elementsName){\r\n        var newElement = null;\r\n\r\n        if(elementsName === 'notesDisplay'){\r\n            newElement = !props[elementsName];\r\n        } else {\r\n            newElement = e.target.value;\r\n        }\r\n\r\n        props['set' + elementsName[0].toUpperCase() + elementsName.substring(1)](newElement);\r\n\r\n        var search = queryString.parse(props.history.location.search);\r\n        \r\n        search[elementsName] = newElement;\r\n\r\n        const newLocation = queryString.stringify(search);\r\n\r\n        props.history.push('/?' + newLocation);\r\n    }\r\n\r\n    function onCleanFretboard(){\r\n        cleanFretboard();\r\n    }\r\n\r\n    function onCopyLink(){\r\n        const url = window.location.href;\r\n\r\n        var textArea = document.createElement(\"textarea\");\r\n\r\n        textArea.style.position = 'fixed';\r\n        textArea.style.top = 0;\r\n        textArea.style.left = 0;\r\n        \r\n        textArea.style.width = '2em';\r\n        textArea.style.height = '2em';\r\n        \r\n        textArea.style.padding = 0;\r\n        \r\n        textArea.style.border = 'none';\r\n        textArea.style.outline = 'none';\r\n        textArea.style.boxShadow = 'none';\r\n        \r\n        textArea.style.background = 'transparent';\r\n        \r\n        textArea.value = url;\r\n        \r\n        document.body.appendChild(textArea);\r\n        \r\n        textArea.select();\r\n        \r\n        try {\r\n            document.execCommand('copy');\r\n            alert(\"The link has been copied successfully.\")\r\n        } catch (err) {\r\n            alert(\"Oop, something wrong happened. You can copy the link directly.\")\r\n        }\r\n        \r\n        document.body.removeChild(textArea);\r\n    }\r\n\r\n    function getScaleNotes(){\r\n\r\n        if(props.scale === \"unset\"){\r\n            return [];\r\n        }\r\n\r\n        var scaleNotes = [];\r\n        \r\n        var scaleFormula = guitar.scales[props.scale].formula;\r\n        \r\n        var steps = 0;\r\n\r\n        scaleFormula.forEach((step) => {\r\n            scaleNotes.push(guitar.notes.sharps[(parseInt(props.keySignature) + steps) % 12]);\r\n            steps += step;\r\n        })\r\n\r\n        return scaleNotes;\r\n    }\r\n\r\n    function getScaleIntervals(){\r\n\r\n        if(props.scale === \"unset\"){\r\n            return;\r\n        }\r\n\r\n        const scale = guitar.scales[props.scale];\r\n\r\n        return scale.intervals;\r\n    }\r\n\r\n    function getModeNotes(){\r\n    \r\n        var modesNotes = [];\r\n\r\n        var mode = parseInt(props.mode)  ;\r\n        \r\n        // Get scale's notes\r\n        var scaleNotes = getScaleNotes();\r\n\r\n        // Put them in order\r\n        while(modesNotes.length < scaleNotes.length){\r\n            \r\n            modesNotes.push(scaleNotes[mode]);\r\n\r\n            mode++;\r\n            \r\n            if(mode === scaleNotes.length){\r\n                mode = mode % scaleNotes.length;\r\n            }\r\n        }\r\n\r\n        return modesNotes;\r\n    }\r\n\r\n    function getModeIntervals(){\r\n\r\n        if(props.scale === \"unset\"){\r\n            return [];\r\n        }\r\n\r\n        if(props.keySignature === \"unset\"){\r\n            return [];\r\n        }\r\n\r\n        const scale = guitar.scales[props.scale];\r\n        \r\n        var intervals = scale.modes[parseInt(props.mode)].intervals;\r\n\r\n        return intervals;\r\n    }\r\n\r\n    function getArppegioNotes(fromArppegio){\r\n        if(props.keySignature === \"unset\"){\r\n            return [];\r\n        }\r\n        \r\n        var arppegioFormula = [];\r\n\r\n        if(fromArppegio){\r\n            if(props.arppegio === \"unset\"){\r\n                return [];\r\n            }\r\n            \r\n            arppegioFormula = guitar.arppegios[props.arppegio].formula;\r\n\r\n        }else{\r\n            if(props.chord === \"unset\"){\r\n                return [];\r\n            }\r\n\r\n            arppegioFormula = guitar.arppegios[props.chord].formula\r\n        }\r\n\r\n        var arppegioNotes = [];\r\n        \r\n        var steps = 0;\r\n\r\n        arppegioFormula.forEach((step) => {\r\n            arppegioNotes.push(guitar.notes.sharps[(parseInt(props.keySignature) + steps) % 12]);\r\n            steps += step;\r\n        })\r\n\r\n        return arppegioNotes;\r\n        \r\n    }\r\n\r\n    function getArppegioIntervals(isFromArppegio){\r\n\r\n        if(props.keySignature === \"unset\"){\r\n            return [];\r\n        }\r\n\r\n        if(props.arppegio === \"unset\" && props.chord === \"unset\"){\r\n            return [];\r\n        }\r\n        \r\n        var arppegio = null;\r\n\r\n        if(isFromArppegio){\r\n            arppegio = guitar.arppegios[props.arppegio];\r\n        }else{\r\n            arppegio = guitar.arppegios[props.chord];\r\n        }\r\n        \r\n        var intervals = arppegio.intervals;\r\n\r\n        return intervals;\r\n    }\r\n\r\n    function update(){\r\n\r\n        props.onSetTitle('Choose something to display...')\r\n\r\n        if(props.keySignature === \"unset\"){\r\n            return;\r\n        }\r\n\r\n        var scale = props.scale; \r\n        \r\n        var arppegio = props.arppegio;\r\n\r\n        var chord = props.chord;\r\n\r\n        if(scale === \"unset\" && arppegio === \"unset\" && chord === \"unset\"){\r\n            return;\r\n        }\r\n\r\n        var notes = null;\r\n        var intervals = null;\r\n        var name = '';\r\n        var keyName = guitar.notes.sharps[props.keySignature];\r\n\r\n        if(scale !== \"unset\"){\r\n            var isModal = guitar.scales[scale].isModal;\r\n\r\n            notes = getScaleNotes();\r\n            props.setScaleNotes(notes);\r\n            \r\n            intervals = getScaleIntervals();\r\n            props.setScaleIntervals(intervals);\r\n\r\n            name = notes[0] + ' ' + guitar.scales[scale].name + ' scale';\r\n            \r\n            if(isModal){\r\n                if(props.mode !== \"unset\"){\r\n                    notes = getModeNotes();\r\n                    props.setModeNotes(notes)\r\n\r\n                    intervals = getModeIntervals();\r\n                    props.setModeIntervals(intervals);\r\n\r\n                    let modeRootName = notes[0];\r\n\r\n                    let modeNumber = parseInt(props.mode) + 1;\r\n\r\n                    name = modeRootName + ' ' + guitar.scales[scale].modes[props.mode].name + ' from the ' + name + ' (Mode #' + modeNumber     + ')';\r\n\r\n                }\r\n            }\r\n        }\r\n    \r\n        if(arppegio !== \"unset\"){\r\n            notes = getArppegioNotes(true);\r\n            props.setArppegioNotes(notes)\r\n\r\n            intervals = guitar.arppegios[arppegio].intervals;\r\n            props.setArppegioIntervals(intervals);\r\n\r\n            name = notes[0] + ' ' + guitar.arppegios[arppegio].name + ' arppegio.';\r\n        }\r\n\r\n            \r\n        if(chord !== \"unset\"){\r\n            notes = getArppegioNotes(false);\r\n            intervals = guitar.arppegios[chord].intervals;\r\n\r\n            name = notes[0] + ' ' + guitar.arppegios[chord].name + ' chord.';\r\n\r\n            if(props.fret !== \"unset\" || props.shape !== \"unset\"){\r\n                props.onSetTitle(name);\r\n                displayChordPortion(notes, intervals);\r\n                return;\r\n            }\r\n        }\r\n        \r\n        props.onSetTitle(name);\r\n        spread(notes, intervals)\r\n    }\r\n\r\n    function displayChordPortion(notes, intervals){\r\n        var nf = [...props.fretboard];\r\n\r\n\r\n        var startingIndex = 0;\r\n        var lastIndex = null;\r\n       \r\n        if(props.shape !== \"unset\"){\r\n            startingIndex = guitar.shapes.indexes[parseInt(props.shape)].start;\r\n            lastIndex = guitar.shapes.indexes[parseInt(props.shape)].end + 1;\r\n        }\r\n\r\n        if(props.fret !== \"unset\"){\r\n            startingIndex = parseInt(props.fret) - 1;\r\n            lastIndex = startingIndex + 4;\r\n        }\r\n\r\n        var visitedStrings = [];\r\n\r\n        notes.forEach((note) => {\r\n            for(var m = 0; m < guitar.numberOfStrings; m++){\r\n                for(var n = startingIndex; n < lastIndex; n++){\r\n                    var currentNote = getNoteFromFretboard(m, n);\r\n                    if(!visitedStrings[m]){\r\n                        if(note === currentNote){\r\n                            visitedStrings[m] = true;\r\n\r\n                            nf[m][n].show = true;\r\n                            if(props.notesDisplay){\r\n                                nf[m][n].current = currentNote;\r\n                            }else{\r\n                                nf[m][n].current = intervals[notes.indexOf(currentNote)];\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        \r\n        props.fillFretboard(nf);\r\n    }\r\n\r\n    function spread(notes, intervals){\r\n\r\n        var nf = [...props.fretboard];\r\n\r\n        var startingIndex = 0;\r\n        var lastIndex = guitar.numberOfFrets;\r\n\r\n        if(props.shape !== \"unset\"){\r\n            startingIndex = guitar.shapes.indexes[parseInt(props.shape)].start;\r\n            lastIndex = guitar.shapes.indexes[parseInt(props.shape)].end + 1;\r\n        }\r\n\r\n        if(props.fret !== \"unset\"){\r\n            startingIndex = parseInt(props.fret) - 1;\r\n            lastIndex = startingIndex + 4;\r\n        }\r\n\r\n        for(var m = 0; m < guitar.numberOfStrings; m++){\r\n            for(var n = startingIndex; n < lastIndex; n++){\r\n                var currentNote = getNoteFromFretboard(m, n);\r\n\r\n                if(notes.includes(currentNote)){\r\n\r\n                    nf[m][n].show = true;\r\n\r\n                    if(props.notesDisplay){\r\n                        nf[m][n].current = currentNote;\r\n                    }else{\r\n                        nf[m][n].current = intervals[notes.indexOf(currentNote)];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        props.fillFretboard(nf);\r\n    }\r\n\r\n    function getCurrentDisplayableScaleNotes(){\r\n        \r\n        var scale = props.scale;\r\n        var mode = props.mode;\r\n        var arppegio = props.arppegio;\r\n        var chord = props.chord;\r\n\r\n        var scaleNotes = [];\r\n\r\n        if(props.keySignature === \"unset\"){\r\n            return [];\r\n        }\r\n\r\n        if(scale !== \"unset\"){\r\n            scaleNotes = getScaleNotes();\r\n            if(guitar.scales[scale].isModal && mode !== \"unset\"){\r\n                scaleNotes = getModeNotes();\r\n            }\r\n        }\r\n\r\n        if(arppegio !== \"unset\"){\r\n            scaleNotes = getArppegioNotes(true);\r\n        }\r\n        \r\n        if(chord !== \"unset\"){\r\n            scaleNotes = getArppegioNotes(false);\r\n        }\r\n\r\n        return scaleNotes;\r\n        \r\n    }\r\n\r\n    function getCurrentDisplayableScaleIntervals(){\r\n        \r\n        var scale = props.scale;\r\n        var mode = props.mode;\r\n        var arppegio = props.arppegio;\r\n        var chord = props.chord;\r\n\r\n        var scaleIntervals = [];\r\n\r\n        if(scale !== \"unset\"){\r\n            scaleIntervals = getScaleIntervals();\r\n            if(guitar.scales[scale].isModal && mode !== \"unset\"){\r\n                scaleIntervals = getModeIntervals();\r\n            }\r\n        }\r\n\r\n        if(arppegio !== \"unset\"){\r\n            scaleIntervals = getArppegioIntervals(true);\r\n        }\r\n\r\n        if(chord !== \"unset\"){\r\n            scaleIntervals = getArppegioIntervals(false);\r\n        }\r\n\r\n        return scaleIntervals;\r\n        \r\n    }\r\n\r\n    function getNoteIndex(currentNote){\r\n\r\n        var scaleNotes =  getCurrentDisplayableScaleNotes();\r\n\r\n        if(props.notesDisplay){\r\n            return scaleNotes.indexOf(currentNote);\r\n        }\r\n\r\n        return getCurrentDisplayableScaleIntervals().indexOf(currentNote);\r\n\r\n    }\r\n\r\n    const rows = [];\r\n\r\n    var rowsCount = guitar.numberOfStrings;\r\n    var columnsCount = guitar.numberOfFrets;\r\n    \r\n    for(let i = 0; i < rowsCount; i++){\r\n        const columns = [];\r\n\r\n        for(let j = 0; j < columnsCount; j++){\r\n\r\n            var note = props.fretboard[i][j];\r\n            columns.push(\r\n                <td\r\n                    key={i + '-' + j} id={i + '-' + j}\r\n                    onClick={() => {\r\n                            props.toggleNote(i, j);\r\n                        }\r\n                    }>\r\n                        <span \r\n                            className={classNames({\r\n                                'note': note.show === true,\r\n                                'root': getNoteIndex(note.current) === 0,\r\n                                \"third\": getNoteIndex(note.current) === 2,\r\n                                'fifth': getNoteIndex(note.current) === 4,\r\n                                'seventh': getNoteIndex(note.current) === 6\r\n                            })}>\r\n                            { note.show && note.current }\r\n                        </span>\r\n                    <hr></hr>\r\n                </td>\r\n            );\r\n            \r\n        }\r\n\r\n        rows.push(\r\n            <tr key={i}>\r\n                { columns }\r\n            </tr>\r\n        )\r\n    }\r\n\r\n    var keys = guitar.notes.sharps.map((note, index) => {\r\n        return <option key={index} value={index}>{note}</option>\r\n    })\r\n\r\n    var scale = props.scale;\r\n\r\n    if(scale !== \"unset\"){\r\n\r\n        const currentScale = guitar.scales[scale];\r\n\r\n        var modes = null;\r\n        \r\n        if(currentScale.isModal){\r\n\r\n            var scaleModes = currentScale.modes;\r\n\r\n            if(scaleModes.length){\r\n                modes = scaleModes.map((mode, index) => {\r\n                    return <option key={index} value={index}>{mode.name}</option>\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    var buttonText = 'Intervals'\r\n\r\n    if(!props.notesDisplay){\r\n        buttonText = 'Notes';\r\n    }\r\n\r\n    var scalesNames = Object.keys(guitar.scales);\r\n\r\n    var scales = scalesNames.map((scaleName) => {\r\n        return <option key={scaleName} value={scaleName}>{guitar.scales[scaleName].name}</option>;\r\n    });\r\n\r\n    var arppegiosNames = Object.keys(guitar.arppegios);\r\n\r\n    var arppegios = arppegiosNames.map((arppegioName) => {\r\n        return <option key={arppegioName} value={arppegioName}>{arppegioName}</option>;\r\n    });\r\n\r\n    var heads = [];\r\n\r\n    for(let i = 0; i < guitar.numberOfFrets; i++){\r\n        var width = guitar.numberOfFrets - i;\r\n        heads.push(<th key={i} width={width + 30}><span className=\"fretNumber\">{i}</span></th>)\r\n    }\r\n\r\n    const chords = arppegios;\r\n    \r\n    return(\r\n        \r\n        <div className=\"fretboard-container\">\r\n            <table>\r\n                <tbody>\r\n                    {\r\n                        rows\r\n                    }\r\n                </tbody>\r\n                <tfoot>\r\n                    <tr>\r\n                        { heads }\r\n                    </tr>\r\n                </tfoot>\r\n            </table>\r\n                    \r\n            <section className=\"controls\">\r\n                <form  className={classes.form}>\r\n                    <FormControl \r\n                        className={classes.formElement}\r\n                        variant=\"outlined\" margin=\"normal\">\r\n                        <InputLabel htmlFor=\"keys\">Keys :</InputLabel>\r\n                        <Select\r\n                        native\r\n                        value={props.keySignature}\r\n                        onChange={(e) => onElementChange(e, 'key')}\r\n                        label=\"Keys :\"\r\n                        >\r\n                        <option value=\"unset\">Select key</option>\r\n                        { keys }\r\n                        </Select>\r\n                    </FormControl>\r\n                    <FormControl \r\n                        className={classes.formElement}\r\n                        variant=\"outlined\" margin=\"normal\" >\r\n                        <InputLabel htmlFor=\"scales\">Scales :</InputLabel>\r\n                        <Select\r\n                        native\r\n                        value={props.scale}\r\n                        onChange={(e) => onElementChange(e, 'scale')}\r\n                        label=\"Scales :\"\r\n                        >\r\n                        <option value=\"unset\">Select scale</option>\r\n                        { scales }\r\n                        </Select>\r\n                    </FormControl>\r\n                    <FormControl \r\n                        className={classes.formElement}\r\n                        variant=\"outlined\" margin=\"normal\"  >\r\n                        <InputLabel htmlFor=\"modes\">Modes :</InputLabel>\r\n                        <Select\r\n                        native\r\n                        value={props.mode}\r\n                        onChange={(e) => onElementChange(e, 'mode')}\r\n                        label=\"Modes :\"\r\n                        >\r\n                        <option value=\"unset\">Select mode</option>\r\n                        { modes }\r\n                        </Select>\r\n                    </FormControl>\r\n                    <FormControl \r\n                        className={classes.formElement}\r\n                        variant=\"outlined\" margin=\"normal\" >\r\n                        <InputLabel htmlFor=\"keys\">Arrpegios :</InputLabel>\r\n                        <Select\r\n                        native\r\n                        value={props.arppegio}\r\n                        onChange={(e) => onElementChange(e, 'arppegio')}\r\n                        label=\"Keys :\"\r\n                        inputProps={{\r\n                            name: 'arppegio',\r\n                            id: 'arppegios',\r\n                        }}\r\n                        >\r\n                        <option value=\"unset\">Select arppegio</option>\r\n                        { arppegios }\r\n                        </Select>\r\n                    </FormControl>\r\n                    <FormControl \r\n                        className={classes.formElement}\r\n                        variant=\"outlined\" margin=\"normal\" >\r\n                        <InputLabel htmlFor=\"keys\">Chords :</InputLabel>\r\n                        <Select\r\n                        native\r\n                        value={props.chord}\r\n                        onChange={(e) => onElementChange(e, 'chord')}\r\n                        label=\"Chords :\"\r\n                        inputProps={{\r\n                            name: 'chord',\r\n                            id: 'chords',\r\n                        }}\r\n                        >\r\n                        <option value=\"unset\">Select chord</option>\r\n                        { chords }\r\n                        </Select>\r\n                    </FormControl>\r\n                    <FormControl \r\n                        className={classes.formElement}\r\n                        variant=\"outlined\" margin=\"normal\" >\r\n                        <InputLabel htmlFor=\"shapes\">Shapes :</InputLabel>\r\n                        <Select\r\n                        native\r\n                        value={props.shape}\r\n                        onChange={(e) => onElementChange(e, 'shape')}\r\n                        label=\"Shapes :\"\r\n                        inputProps={{\r\n                            name: 'shape',\r\n                            id: 'shapes',\r\n                        }}\r\n                        >\r\n                        <option value=\"unset\">Select all</option>\r\n                        { guitar.shapes.names.map((shape, index) => {\r\n                            return <option key={index} value={index}>{shape}</option>\r\n                        }) }\r\n                        </Select>\r\n                    </FormControl>\r\n                    <FormControl \r\n                        className={classes.formElement}\r\n                        variant=\"outlined\" margin=\"normal\" >\r\n                        <InputLabel htmlFor=\"positions\">Positions :</InputLabel>\r\n                        <Select\r\n                        native\r\n                        value={props.fret}\r\n                        onChange={(e) => onElementChange(e, 'fret')}\r\n                        label=\"Positions :\"\r\n                        inputProps={{\r\n                            name: 'position',\r\n                            id: 'positions',\r\n                        }}\r\n                        >\r\n                        <option value=\"unset\">Select all</option>\r\n                        { Array.from(Array(guitar.numberOfFrets - 3).keys(), (_, i) => i + 1).map((fret) => {\r\n                            return <option key={fret}>{fret}</option>\r\n                        }) }\r\n                        </Select>\r\n                    </FormControl>\r\n                    \r\n                    <Button\r\n                        className={classes.formElement}\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        size=\"medium\"\r\n                        onClick={(e) => onElementChange(e, 'notesDisplay')}\r\n                    >\r\n                        { buttonText } \r\n                    </Button>\r\n\r\n                    <Button\r\n                        className={classes.formElement}\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        size=\"medium\"\r\n                        onClick={onCleanFretboard}\r\n                    >\r\n                        Clean\r\n                    </Button>\r\n                    <Button\r\n                        className={classes.formElement}\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        size=\"medium\"\r\n                        onClick={onCopyLink}\r\n                    >\r\n                         Copy link\r\n                    </Button>\r\n                    \r\n                    <Typography \r\n                        className={classes.seperator}\r\n                        variant=\"h6\">\r\n                        Coming soon :\r\n                    </Typography>\r\n                    <Button\r\n                        className={classes.formElement}\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        size=\"medium\"\r\n                    >\r\n                        Detect\r\n                    </Button>\r\n\r\n                    <Button\r\n                        className={classes.formElement}\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        size=\"medium\"\r\n                    >\r\n                         Print\r\n                    </Button>\r\n\r\n                    <Button\r\n                        className={classes.formElement}\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        size=\"medium\"\r\n                    >\r\n                         Save\r\n                    </Button>\r\n\r\n                </form>\r\n            </section>\r\n        </div>\r\n    );\r\n})\r\n\r\nconst mapStateToProps = state => {\r\n    return { \r\n        fretboard: state.fretboard.fretboard,\r\n        keySignature: state.fretboard.keySignature,\r\n        \r\n        scale : state.fretboard.scale,\r\n        scaleNotes: state.fretboard.scaleNotes,\r\n        scaleIntervals: state.fretboard.scaleIntervals,\r\n        \r\n        mode: state.fretboard.mode,\r\n        modeNotes: state.fretboard.modeNotes,\r\n        modeIntervals: state.fretboard.modeIntervals,\r\n        \r\n        arppegio: state.fretboard.arppegio,\r\n        arppegioNotes: state.fretboard.arppegioNotes,\r\n        arppegioIntervals: state.fretboard.arppegioIntervals,\r\n\r\n        chord: state.fretboard.chord,\r\n        \r\n        shape: state.fretboard.shape,\r\n        fret: state.fretboard.fret,\r\n        \r\n        notesDisplay: state.fretboard.notesDisplay\r\n    };\r\n};\r\n  \r\nexport default connect(\r\n    mapStateToProps,\r\n    { \r\n        fillFretboard,\r\n        toggleNote, \r\n        setKey, \r\n\r\n        setScale, \r\n        setScaleFormula,\r\n        setScaleNotes,\r\n        setScaleIntervals,\r\n        \r\n        setMode,\r\n        setModeNotes,\r\n        setModeIntervals,\r\n        setArppegio,\r\n        setArppegioNotes,\r\n        setArppegioIntervals,\r\n\r\n        setChord,\r\n\r\n        setShape,\r\n        setFret,\r\n\r\n        setNotesDisplay\r\n    })(Fretboard);","C:\\Users\\hamza\\OneDrive\\Documents\\fretboard\\src\\components\\CircleOfFifths.js",[],"C:\\Users\\hamza\\OneDrive\\Documents\\fretboard\\src\\redux\\reducers\\index.js",[],"C:\\Users\\hamza\\OneDrive\\Documents\\fretboard\\src\\redux\\actions.js",[],"C:\\Users\\hamza\\OneDrive\\Documents\\fretboard\\src\\redux\\helpers.js",[],"C:\\Users\\hamza\\OneDrive\\Documents\\fretboard\\src\\config\\guitar.js",[],"C:\\Users\\hamza\\OneDrive\\Documents\\fretboard\\src\\redux\\reducers\\fretboard.js",[],"C:\\Users\\hamza\\OneDrive\\Documents\\fretboard\\src\\redux\\reducers\\circleOfFifths.js",[],"C:\\Users\\hamza\\OneDrive\\Documents\\fretboard\\src\\redux\\actionTypes.js",[],{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","severity":1,"message":"66","line":67,"column":8,"nodeType":"67","endLine":67,"endColumn":10,"suggestions":"68"},{"ruleId":"65","severity":1,"message":"69","line":132,"column":8,"nodeType":"67","endLine":140,"endColumn":6,"suggestions":"70"},{"ruleId":"71","severity":1,"message":"72","line":365,"column":13,"nodeType":"73","messageId":"74","endLine":365,"endColumn":20},"no-native-reassign",["75"],"no-negated-in-lhs",["76"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'fillFretboard' and 'fillStore'. Either include them or remove the dependency array.","ArrayExpression",["77"],"React Hook useEffect has missing dependencies: 'cleanFretboard' and 'update'. Either include them or remove the dependency array.",["78"],"no-unused-vars","'keyName' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation",{"desc":"79","fix":"80"},{"desc":"81","fix":"82"},"Update the dependencies array to be: [fillFretboard, fillStore]",{"range":"83","text":"84"},"Update the dependencies array to be: [props.keySignature, props.scale, props.mode, props.arppegio, props.chord, props.fret, props.notesDisplay, props.shape, cleanFretboard, update]",{"range":"85","text":"86"},[1588,1590],"[fillFretboard, fillStore]",[3291,3484],"[props.keySignature, props.scale, props.mode, props.arppegio, props.chord, props.fret, props.notesDisplay, props.shape, cleanFretboard, update]"]